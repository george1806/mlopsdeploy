apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-webserver-config
  namespace: airflow
data:
  webserver_config.py: |
    # -*- coding: utf-8 -*-
    """
    Flask-AppBuilder configuration file for Airflow 3.0 with Keycloak OAuth integration
    """

    import os
    from flask_appbuilder.security.manager import AUTH_OAUTH

    # Enable OAuth authentication
    AUTH_TYPE = AUTH_OAUTH

    # OAuth configuration - manual endpoints to avoid metadata discovery issues
    KEYCLOAK_INTERNAL_HOST = os.environ.get('KEYCLOAK_INTERNAL_HOST', 'http://keycloak.keycloak.svc.cluster.local:8080')
    KEYCLOAK_EXTERNAL_HOST = os.environ.get('KEYCLOAK_HOST', 'https://keycloak.local')
    KEYCLOAK_REALM = os.environ.get('KEYCLOAK_REALM', 'mlops')

    OAUTH_PROVIDERS = [
        {
            "name": "keycloak",
            "icon": "fa-key",
            "token_key": "access_token",
            "remote_app": {
                "client_id": os.environ.get('KEYCLOAK_CLIENT_ID', 'airflow-client'),
                "client_secret": os.environ.get('KEYCLOAK_CLIENT_SECRET', ''),
                "api_base_url": f"{KEYCLOAK_INTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/",
                "access_token_url": f"{KEYCLOAK_INTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/token",
                "authorize_url": f"{KEYCLOAK_EXTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/auth",
                "userinfo_url": f"{KEYCLOAK_INTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/userinfo",
                "jwks_uri": f"{KEYCLOAK_INTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/certs",
                "issuer": f"{KEYCLOAK_EXTERNAL_HOST}/realms/{KEYCLOAK_REALM}",
                "client_kwargs": {
                    "scope": "openid email profile groups",
                    "token_endpoint_auth_method": "client_secret_post"
                },
                "access_token_params": {
                    "grant_type": "authorization_code"
                },
                "request_token_url": None,
                # Add logout URL to the provider configuration
                "logout_url": f"{KEYCLOAK_EXTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/logout",
            },
        }
    ]

    # Simple logout configuration - redirect to Keycloak logout
    AUTH_LOGOUT_REDIRECT_URL = f"{KEYCLOAK_EXTERNAL_HOST}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/logout?post_logout_redirect_uri={os.environ.get('AIRFLOW_URL', 'https://airflow.local')}/login/"

    # Additional Flask-AppBuilder security settings
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Public"  # Default role for users without specific groups

    # Role mapping for OAuth users - Maps Keycloak groups to Airflow roles
    AUTH_ROLES_MAPPING = {
        "airflow_admin": ["Admin"],           # Keycloak group -> Airflow role
        "airflow_op": ["Op"],                 # Operators - can view and manage DAGs
        "airflow_user": ["User"],             # Basic users - read-only access
        "airflow_viewer": ["Viewer"],         # View-only access
    }

    # Production-ready role assignment with proper error handling
    # Use JMESPath to map Keycloak groups to Airflow roles
    AUTH_USER_REGISTRATION_ROLE_JMESPATH = """
        (groups && length(groups) > `0`) &&
        (
            (contains(groups, 'airflow_admin') && 'Admin') ||
            (contains(groups, 'airflow_op') && 'Op') ||
            (contains(groups, 'airflow_user') && 'User') ||
            (contains(groups, 'airflow_viewer') && 'Viewer') ||
            'Public'
        ) || 'Public'
    """