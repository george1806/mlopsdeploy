images:
  airflow:
    repository: ${HARBOR_URL}/${HARBOR_PROJECT}/airflow
    tag: "${AIRFLOW_TAG}"
    pullPolicy: IfNotPresent

imagePullSecrets:
  - name: harbor-creds

executor: ${AIRFLOW_EXECUTOR}

# Airflow version
airflowVersion: 3.0.2

# Disable bundled DB/Redis
postgresql:
  enabled: false
redis:
  enabled: false

# External PostgreSQL and Redis configuration
data:
  metadataConnection:
    user: ${AIRFLOW_DB_USER}
    pass: ${AIRFLOW_DB_PASSWORD}
    protocol: postgresql
    host: ${AIRFLOW_DB_HOST}
    port: ${AIRFLOW_DB_PORT}
    db: ${AIRFLOW_DB_NAME}
    sslmode: disable
  brokerUrl: redis://:${AIRFLOW_REDIS_PASSWORD}@${AIRFLOW_REDIS_HOST}:${AIRFLOW_REDIS_PORT}/0
  resultBackendConnection:
    user: ${AIRFLOW_DB_USER}
    pass: ${AIRFLOW_DB_PASSWORD}
    protocol: postgresql
    host: ${AIRFLOW_DB_HOST}
    port: ${AIRFLOW_DB_PORT}
    db: ${AIRFLOW_DB_NAME}
    sslmode: disable

# Static secret keys for production
fernetKey: "fernet-key-change-me-in-production-32-char-key"
webserverSecretKey: "webserver-secret-key-change-me-in-production"

# âœ… Disable migrations
migrateDatabaseJob:
  enabled: false

checkMigrations:
  enabled: false

# Ingress via Traefik + TLS
ingress:
  web:
    enabled: false
  apiServer:
    enabled: true
    ingressClassName: traefik
    path: "/"
    pathType: "Prefix"
    hosts:
      - name: ${AIRFLOW_HOST}
        tls:
          enabled: true
          secretName: ${TLS_SECRET_NAME}
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"

# Persistence for logs
persistence:
  enabled: true
  size: 20Gi
  accessMode: ReadWriteOnce

# Component-specific configurations
scheduler:
  waitForMigrations:
    enabled: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"

# OIDC Auth (Keycloak) + webserver configuration
webserver:
  enabled: true
  replicas: 1
  waitForMigrations:
    enabled: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  service:
    type: ClusterIP
    ports:
      - name: airflow-ui
        port: 8082
  defaultUser:
    enabled: true
    role: Admin
    username: admin
    email: admin@example.com
    firstName: admin
    lastName: user
    password: admin
  env:
    - name: AIRFLOW__WEBSERVER__RBAC
      value: "True"
    - name: AIRFLOW__WEBSERVER__AUTHENTICATE
      value: "True"
    - name: AIRFLOW__WEBSERVER__AUTH_BACKEND
      value: "airflow.auth.backends.generic_oauth"
    - name: AIRFLOW__WEBSERVER__OAUTH_PROVIDERS
      value: |
        [{
          "name": "keycloak",
          "icon": "fa-openid",
          "token_key": "access_token",
          "remote_app": {
            "client_id": "${KEYCLOAK_CLIENT_ID}",
            "client_secret": "${KEYCLOAK_CLIENT_SECRET}",
            "api_base_url": "${KEYCLOAK_HOST}",
            "client_kwargs": {"scope": "openid email profile"},
            "access_token_url": "${KEYCLOAK_HOST}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/token",
            "authorize_url": "${KEYCLOAK_HOST}/realms/${KEYCLOAK_REALM}/protocol/openid-connect/auth",
            "request_token_url": null
          }
        }]

workers:
  waitForMigrations:
    enabled: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"

triggerer:
  waitForMigrations:
    enabled: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"

dagProcessor:
  waitForMigrations:
    enabled: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"

apiServer:
  waitForMigrations:
    enabled: false
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
